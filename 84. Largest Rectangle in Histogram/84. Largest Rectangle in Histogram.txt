第1次提交：这个题想着比较难，可以单独拿出来讲讲。
对于计算矩形面积来说，最关键的问题是对于任意位置元素，确定其两侧的边界线位置，即两侧第一个小于该值的元素位置。
解决方法为维护一个栈，记录当前的非降序列。一旦当前元素小于栈顶元素高度，就应当对栈顶元素开始计算。
由于栈中记录的是非降序列，因此当前位置即为栈顶元素的右侧边界。左侧边界为栈中第二个元素对应的位置。
对于元素相等的情况，该方法仍然可以处理：由于右侧边界时固定的（当前位置），而左侧边界会不断向左搜索，最终总会找到最左侧的边界。
分析复杂度：所有元素要么不进栈，要么进栈一次且出栈一次，时间复杂度为O(n)。
第2次提交：受到评论区启发，也可以不利用栈进行左右两侧的较小元素的位置。对于每个元素，首先将其左侧元素置为第一个较小元素p，若其比当前元素要大，则通过p=lessLeft[p]来寻找第一个比元素p更小的元素。不断循环比较，最终可以找到其位置。这种方式看似O(n^2)复杂度，其实只有O(n)的复杂度，原因是所有的元素只可能被跳过比较一次。若当前元素r小于某一个p，则之后再次进行搜索时将直接跳过p与r之间的元素，因此复杂度降低为线性。